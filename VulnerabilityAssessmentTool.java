import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class VulnerabilityAssessmentTool {
    public static void main(String[] args) {
        JFrame frame = new JFrame("Vulnerability Assessment Tool");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(500, 400);

        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());
        panel.setBackground(new Color(60, 63, 65));
        frame.add(panel);

        placeComponents(panel);

        frame.setVisible(true);
    }

    private static void placeComponents(JPanel panel) {
        JPanel topPanel = new JPanel();
        topPanel.setBackground(new Color(60, 63, 65));
        topPanel.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 10, 10, 10);

        JLabel userLabel = new JLabel("Website URL:");
        userLabel.setForeground(Color.WHITE);
        gbc.gridx = 0;
        gbc.gridy = 0;
        topPanel.add(userLabel, gbc);

        JTextField userText = new JTextField(20);
        gbc.gridx = 1;
        topPanel.add(userText, gbc);

        JButton scanButton = new JButton("Start Scan");
        scanButton.setBackground(new Color(75, 110, 175));
        scanButton.setForeground(Color.WHITE);
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        topPanel.add(scanButton, gbc);

        panel.add(topPanel, BorderLayout.NORTH);

        JTextArea resultArea = new JTextArea();
        resultArea.setEditable(false);
        resultArea.setBackground(new Color(43, 43, 43));
        resultArea.setForeground(Color.WHITE);
        resultArea.setMargin(new Insets(10, 10, 10, 10));
        JScrollPane scrollPane = new JScrollPane(resultArea);
        scrollPane.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        panel.add(scrollPane, BorderLayout.CENTER);

        scanButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String url = userText.getText().trim();
                if (url.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Error: Please enter a valid URL.", "Invalid URL", JOptionPane.ERROR_MESSAGE);
                } else {
                    String result = performScan(url);
                    resultArea.setText(result);
                }
            }
        });

        JLabel createdByLabel = createAnimatedLabel("Created by drunk_bird");
        panel.add(createdByLabel, BorderLayout.SOUTH);
    }

    private static JLabel createAnimatedLabel(String text) {
        JLabel label = new JLabel(text, SwingConstants.CENTER);
        label.setForeground(Color.WHITE);
        label.setFont(new Font("Serif", Font.BOLD, 20));
        label.setOpaque(false);
        
        Timer timer = new Timer(30, new ActionListener() {
            int alpha = 0;
            boolean fadeIn = true;

            @Override
            public void actionPerformed(ActionEvent e) {
                if (fadeIn) {
                    alpha += 5;
                    if (alpha >= 255) {
                        alpha = 255;
                        fadeIn = false;
                    }
                } else {
                    alpha -= 5;
                    if (alpha <= 0) {
                        alpha = 0;
                        fadeIn = true;
                    }
                }
                label.setForeground(new Color(255, 255, 255, alpha));
            }
        });
        timer.start();

        return label;
    }

    private static String performScan(String url) {
        StringBuilder result = new StringBuilder();
        try {
            ProcessBuilder builder = new ProcessBuilder("python", "consolidated_vulnerability_scanner.py", url);
            builder.redirectErrorStream(true);
            Process process = builder.start();
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                result.append(line).append("\n");
            }
            process.waitFor();
        } catch (Exception e) {
            e.printStackTrace();
            return "Error: An error occurred while performing the scan.";
        }
        return result.toString();
    }
}
